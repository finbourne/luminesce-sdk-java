/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.finbourne.luminesce.model.DataType;
import com.finbourne.luminesce.model.QueryDesignerBinaryOperator;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * A single on clause term (a pair of columns to join or a column to filter on)
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class OnClauseTermDesign {
  public static final String SERIALIZED_NAME_LEFT_TABLE_FIELD = "leftTableField";
  @SerializedName(SERIALIZED_NAME_LEFT_TABLE_FIELD)
  private String leftTableField;

  public static final String SERIALIZED_NAME_RIGHT_TABLE_FIELD = "rightTableField";
  @SerializedName(SERIALIZED_NAME_RIGHT_TABLE_FIELD)
  private String rightTableField;

  public static final String SERIALIZED_NAME_OPERATOR = "operator";
  @SerializedName(SERIALIZED_NAME_OPERATOR)
  private QueryDesignerBinaryOperator operator;

  public static final String SERIALIZED_NAME_FILTER_VALUE = "filterValue";
  @SerializedName(SERIALIZED_NAME_FILTER_VALUE)
  private String filterValue;

  public static final String SERIALIZED_NAME_FILTER_VALUE_DATA_TYPE = "filterValueDataType";
  @SerializedName(SERIALIZED_NAME_FILTER_VALUE_DATA_TYPE)
  private DataType filterValueDataType;

  public OnClauseTermDesign() {
  }

  public OnClauseTermDesign leftTableField(String leftTableField) {
    
    this.leftTableField = leftTableField;
    return this;
  }

   /**
   * Name of field in the left table to join to (complex expressions are not supported at this time)
   * @return leftTableField
  **/
  @jakarta.annotation.Nullable
  public String getLeftTableField() {
    return leftTableField;
  }


  public void setLeftTableField(String leftTableField) {
    this.leftTableField = leftTableField;
  }


  public OnClauseTermDesign rightTableField(String rightTableField) {
    
    this.rightTableField = rightTableField;
    return this;
  }

   /**
   * Name of field in the left table to join to (complex expressions are not supported at this time)
   * @return rightTableField
  **/
  @jakarta.annotation.Nullable
  public String getRightTableField() {
    return rightTableField;
  }


  public void setRightTableField(String rightTableField) {
    this.rightTableField = rightTableField;
  }


  public OnClauseTermDesign operator(QueryDesignerBinaryOperator operator) {
    
    this.operator = operator;
    return this;
  }

   /**
   * Get operator
   * @return operator
  **/
  @jakarta.annotation.Nonnull
  public QueryDesignerBinaryOperator getOperator() {
    return operator;
  }


  public void setOperator(QueryDesignerBinaryOperator operator) {
    this.operator = operator;
  }


  public OnClauseTermDesign filterValue(String filterValue) {
    
    this.filterValue = filterValue;
    return this;
  }

   /**
   * The value to compare against (always as a string, but will be formatted to the correct type)
   * @return filterValue
  **/
  @jakarta.annotation.Nullable
  public String getFilterValue() {
    return filterValue;
  }


  public void setFilterValue(String filterValue) {
    this.filterValue = filterValue;
  }


  public OnClauseTermDesign filterValueDataType(DataType filterValueDataType) {
    
    this.filterValueDataType = filterValueDataType;
    return this;
  }

   /**
   * Get filterValueDataType
   * @return filterValueDataType
  **/
  @jakarta.annotation.Nullable
  public DataType getFilterValueDataType() {
    return filterValueDataType;
  }


  public void setFilterValueDataType(DataType filterValueDataType) {
    this.filterValueDataType = filterValueDataType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnClauseTermDesign onClauseTermDesign = (OnClauseTermDesign) o;
    return Objects.equals(this.leftTableField, onClauseTermDesign.leftTableField) &&
        Objects.equals(this.rightTableField, onClauseTermDesign.rightTableField) &&
        Objects.equals(this.operator, onClauseTermDesign.operator) &&
        Objects.equals(this.filterValue, onClauseTermDesign.filterValue) &&
        Objects.equals(this.filterValueDataType, onClauseTermDesign.filterValueDataType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(leftTableField, rightTableField, operator, filterValue, filterValueDataType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnClauseTermDesign {\n");
    sb.append("    leftTableField: ").append(toIndentedString(leftTableField)).append("\n");
    sb.append("    rightTableField: ").append(toIndentedString(rightTableField)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    filterValue: ").append(toIndentedString(filterValue)).append("\n");
    sb.append("    filterValueDataType: ").append(toIndentedString(filterValueDataType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("leftTableField");
    openapiFields.add("rightTableField");
    openapiFields.add("operator");
    openapiFields.add("filterValue");
    openapiFields.add("filterValueDataType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operator");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OnClauseTermDesign
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnClauseTermDesign.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnClauseTermDesign is not found in the empty JSON string", OnClauseTermDesign.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OnClauseTermDesign.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("leftTableField") != null && !jsonObj.get("leftTableField").isJsonNull()) && !jsonObj.get("leftTableField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `leftTableField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("leftTableField").toString()));
      }
      if ((jsonObj.get("rightTableField") != null && !jsonObj.get("rightTableField").isJsonNull()) && !jsonObj.get("rightTableField").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rightTableField` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rightTableField").toString()));
      }
      if ((jsonObj.get("filterValue") != null && !jsonObj.get("filterValue").isJsonNull()) && !jsonObj.get("filterValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filterValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filterValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnClauseTermDesign.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnClauseTermDesign' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnClauseTermDesign> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnClauseTermDesign.class));

       return (TypeAdapter<T>) new TypeAdapter<OnClauseTermDesign>() {
           @Override
           public void write(JsonWriter out, OnClauseTermDesign value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnClauseTermDesign read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnClauseTermDesign given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnClauseTermDesign
  * @throws IOException if the JSON string is invalid with respect to OnClauseTermDesign
  */
  public static OnClauseTermDesign fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnClauseTermDesign.class);
  }

 /**
  * Convert an instance of OnClauseTermDesign to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
