/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.finbourne.luminesce.model.CursorPosition;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * Representation of a sql error
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ErrorHighlightItem {
  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private CursorPosition start;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private CursorPosition stop;

  public static final String SERIALIZED_NAME_NO_VIABLE_ALTERNATIVE_START = "noViableAlternativeStart";
  @SerializedName(SERIALIZED_NAME_NO_VIABLE_ALTERNATIVE_START)
  private CursorPosition noViableAlternativeStart;

  public static final String SERIALIZED_NAME_LENGTH = "length";
  @SerializedName(SERIALIZED_NAME_LENGTH)
  private Integer length;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public ErrorHighlightItem() {
  }

  public ErrorHighlightItem start(CursorPosition start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @jakarta.annotation.Nonnull
  public CursorPosition getStart() {
    return start;
  }


  public void setStart(CursorPosition start) {
    this.start = start;
  }


  public ErrorHighlightItem stop(CursorPosition stop) {
    
    this.stop = stop;
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @jakarta.annotation.Nonnull
  public CursorPosition getStop() {
    return stop;
  }


  public void setStop(CursorPosition stop) {
    this.stop = stop;
  }


  public ErrorHighlightItem noViableAlternativeStart(CursorPosition noViableAlternativeStart) {
    
    this.noViableAlternativeStart = noViableAlternativeStart;
    return this;
  }

   /**
   * Get noViableAlternativeStart
   * @return noViableAlternativeStart
  **/
  @jakarta.annotation.Nullable
  public CursorPosition getNoViableAlternativeStart() {
    return noViableAlternativeStart;
  }


  public void setNoViableAlternativeStart(CursorPosition noViableAlternativeStart) {
    this.noViableAlternativeStart = noViableAlternativeStart;
  }


  public ErrorHighlightItem length(Integer length) {
    
    this.length = length;
    return this;
  }

   /**
   * The length of the error token counting line breaks if any
   * @return length
  **/
  @jakarta.annotation.Nonnull
  public Integer getLength() {
    return length;
  }


  public void setLength(Integer length) {
    this.length = length;
  }


  public ErrorHighlightItem message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * The error message
   * @return message
  **/
  @jakarta.annotation.Nonnull
  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ErrorHighlightItem errorHighlightItem = (ErrorHighlightItem) o;
    return Objects.equals(this.start, errorHighlightItem.start) &&
        Objects.equals(this.stop, errorHighlightItem.stop) &&
        Objects.equals(this.noViableAlternativeStart, errorHighlightItem.noViableAlternativeStart) &&
        Objects.equals(this.length, errorHighlightItem.length) &&
        Objects.equals(this.message, errorHighlightItem.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, stop, noViableAlternativeStart, length, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ErrorHighlightItem {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    noViableAlternativeStart: ").append(toIndentedString(noViableAlternativeStart)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start");
    openapiFields.add("stop");
    openapiFields.add("noViableAlternativeStart");
    openapiFields.add("length");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("start");
    openapiRequiredFields.add("stop");
    openapiRequiredFields.add("length");
    openapiRequiredFields.add("message");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ErrorHighlightItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ErrorHighlightItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ErrorHighlightItem is not found in the empty JSON string", ErrorHighlightItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ErrorHighlightItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `start`
      CursorPosition.validateJsonElement(jsonObj.get("start"));
      // validate the required field `stop`
      CursorPosition.validateJsonElement(jsonObj.get("stop"));
      // validate the optional field `noViableAlternativeStart`
      if (jsonObj.get("noViableAlternativeStart") != null && !jsonObj.get("noViableAlternativeStart").isJsonNull()) {
        CursorPosition.validateJsonElement(jsonObj.get("noViableAlternativeStart"));
      }
      if (!jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ErrorHighlightItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ErrorHighlightItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ErrorHighlightItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ErrorHighlightItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ErrorHighlightItem>() {
           @Override
           public void write(JsonWriter out, ErrorHighlightItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ErrorHighlightItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ErrorHighlightItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ErrorHighlightItem
  * @throws IOException if the JSON string is invalid with respect to ErrorHighlightItem
  */
  public static ErrorHighlightItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ErrorHighlightItem.class);
  }

 /**
  * Convert an instance of ErrorHighlightItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
