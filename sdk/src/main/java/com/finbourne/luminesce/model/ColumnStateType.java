/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * Representation of a column within the grid
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ColumnStateType {
  public static final String SERIALIZED_NAME_COL_ID = "colId";
  @SerializedName(SERIALIZED_NAME_COL_ID)
  private String colId;

  public static final String SERIALIZED_NAME_HIDE = "hide";
  @SerializedName(SERIALIZED_NAME_HIDE)
  private Boolean hide;

  public static final String SERIALIZED_NAME_SORT = "sort";
  @SerializedName(SERIALIZED_NAME_SORT)
  private String sort;

  public static final String SERIALIZED_NAME_SORT_INDEX = "sortIndex";
  @SerializedName(SERIALIZED_NAME_SORT_INDEX)
  private Integer sortIndex;

  public ColumnStateType() {
  }

  public ColumnStateType colId(String colId) {
    
    this.colId = colId;
    return this;
  }

   /**
   * Unique identifier for the column
   * @return colId
  **/
  @jakarta.annotation.Nonnull
  public String getColId() {
    return colId;
  }


  public void setColId(String colId) {
    this.colId = colId;
  }


  public ColumnStateType hide(Boolean hide) {
    
    this.hide = hide;
    return this;
  }

   /**
   * Flag to determine whether the column is visible in the grid
   * @return hide
  **/
  @jakarta.annotation.Nonnull
  public Boolean getHide() {
    return hide;
  }


  public void setHide(Boolean hide) {
    this.hide = hide;
  }


  public ColumnStateType sort(String sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * The sort order (asc or desc)
   * @return sort
  **/
  @jakarta.annotation.Nullable
  public String getSort() {
    return sort;
  }


  public void setSort(String sort) {
    this.sort = sort;
  }


  public ColumnStateType sortIndex(Integer sortIndex) {
    
    this.sortIndex = sortIndex;
    return this;
  }

   /**
   * The index of the sort to determine the order in which the sorts are applied
   * @return sortIndex
  **/
  @jakarta.annotation.Nullable
  public Integer getSortIndex() {
    return sortIndex;
  }


  public void setSortIndex(Integer sortIndex) {
    this.sortIndex = sortIndex;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnStateType columnStateType = (ColumnStateType) o;
    return Objects.equals(this.colId, columnStateType.colId) &&
        Objects.equals(this.hide, columnStateType.hide) &&
        Objects.equals(this.sort, columnStateType.sort) &&
        Objects.equals(this.sortIndex, columnStateType.sortIndex);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(colId, hide, sort, sortIndex);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnStateType {\n");
    sb.append("    colId: ").append(toIndentedString(colId)).append("\n");
    sb.append("    hide: ").append(toIndentedString(hide)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    sortIndex: ").append(toIndentedString(sortIndex)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colId");
    openapiFields.add("hide");
    openapiFields.add("sort");
    openapiFields.add("sortIndex");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("colId");
    openapiRequiredFields.add("hide");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ColumnStateType
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnStateType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnStateType is not found in the empty JSON string", ColumnStateType.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ColumnStateType.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("colId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `colId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("colId").toString()));
      }
      if ((jsonObj.get("sort") != null && !jsonObj.get("sort").isJsonNull()) && !jsonObj.get("sort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sort").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnStateType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnStateType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnStateType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnStateType.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnStateType>() {
           @Override
           public void write(JsonWriter out, ColumnStateType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnStateType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ColumnStateType given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ColumnStateType
  * @throws IOException if the JSON string is invalid with respect to ColumnStateType
  */
  public static ColumnStateType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnStateType.class);
  }

 /**
  * Convert an instance of ColumnStateType to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
