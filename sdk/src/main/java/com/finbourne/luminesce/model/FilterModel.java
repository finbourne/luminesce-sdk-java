/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.finbourne.luminesce.model.FilterType;
import com.finbourne.luminesce.model.Type;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;


import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * Representation of the data used in a filter for the where clause
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class FilterModel {
  public static final String SERIALIZED_NAME_FILTER_TYPE = "filterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private FilterType filterType;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private com.finbourne.luminesce.model.Type type;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_FILTER_TO = "filterTo";
  @SerializedName(SERIALIZED_NAME_FILTER_TO)
  private java.math.BigDecimal filterTo;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values;

  public static final String SERIALIZED_NAME_DATE_FROM = "dateFrom";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "dateTo";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  public FilterModel() {
  }

  public FilterModel filterType(FilterType filterType) {
    
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @jakarta.annotation.Nonnull
  public FilterType getFilterType() {
    return filterType;
  }


  public void setFilterType(FilterType filterType) {
    this.filterType = filterType;
  }


  public FilterModel type(com.finbourne.luminesce.model.Type type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  public com.finbourne.luminesce.model.Type getType() {
    return type;
  }


  public void setType(com.finbourne.luminesce.model.Type type) {
    this.type = type;
  }


  public FilterModel filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * The filter value
   * @return filter
  **/
  @jakarta.annotation.Nullable
  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public FilterModel filterTo(java.math.BigDecimal filterTo) {
    
    this.filterTo = filterTo;
    return this;
  }

   /**
   * The upper bound filter value for the number filter type
   * @return filterTo
  **/
  @jakarta.annotation.Nullable
  public java.math.BigDecimal getFilterTo() {
    return filterTo;
  }


  public void setFilterTo(java.math.BigDecimal filterTo) {
    this.filterTo = filterTo;
  }


  public FilterModel values(List<String> values) {
    
    this.values = values;
    return this;
  }

  public FilterModel addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * An array of possible values for the set filter type
   * @return values
  **/
  @jakarta.annotation.Nullable
  public List<String> getValues() {
    return values;
  }


  public void setValues(List<String> values) {
    this.values = values;
  }


  public FilterModel dateFrom(String dateFrom) {
    
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * A lower bound date for the date filter type
   * @return dateFrom
  **/
  @jakarta.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }


  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public FilterModel dateTo(String dateTo) {
    
    this.dateTo = dateTo;
    return this;
  }

   /**
   * An upper bound date for the date filter type
   * @return dateTo
  **/
  @jakarta.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }


  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterModel filterModel = (FilterModel) o;
    return Objects.equals(this.filterType, filterModel.filterType) &&
        Objects.equals(this.type, filterModel.type) &&
        Objects.equals(this.filter, filterModel.filter) &&
        (this.filterTo.compareTo(filterModel.getFilterTo()) == 0) &&
        Objects.equals(this.values, filterModel.values) &&
        Objects.equals(this.dateFrom, filterModel.dateFrom) &&
        Objects.equals(this.dateTo, filterModel.dateTo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(filterType, type, filter, filterTo, values, dateFrom, dateTo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterModel {\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    filterTo: ").append(toIndentedString(filterTo)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filterType");
    openapiFields.add("type");
    openapiFields.add("filter");
    openapiFields.add("filterTo");
    openapiFields.add("values");
    openapiFields.add("dateFrom");
    openapiFields.add("dateTo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("filterType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to FilterModel
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FilterModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FilterModel is not found in the empty JSON string", FilterModel.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FilterModel.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
      if ((jsonObj.get("dateFrom") != null && !jsonObj.get("dateFrom").isJsonNull()) && !jsonObj.get("dateFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFrom").toString()));
      }
      if ((jsonObj.get("dateTo") != null && !jsonObj.get("dateTo").isJsonNull()) && !jsonObj.get("dateTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FilterModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FilterModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FilterModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FilterModel.class));

       return (TypeAdapter<T>) new TypeAdapter<FilterModel>() {
           @Override
           public void write(JsonWriter out, FilterModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FilterModel read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of FilterModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of FilterModel
  * @throws IOException if the JSON string is invalid with respect to FilterModel
  */
  public static FilterModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FilterModel.class);
  }

 /**
  * Convert an instance of FilterModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
