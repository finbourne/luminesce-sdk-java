/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.finbourne.luminesce.model.BackgroundQueryState;
import com.finbourne.luminesce.model.TaskStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * BackgroundQueryCancelResponse
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BackgroundQueryCancelResponse {
  public static final String SERIALIZED_NAME_HAD_DATA = "hadData";
  @SerializedName(SERIALIZED_NAME_HAD_DATA)
  private Boolean hadData;

  public static final String SERIALIZED_NAME_PREVIOUS_STATUS = "previousStatus";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATUS)
  private TaskStatus previousStatus;

  public static final String SERIALIZED_NAME_PREVIOUS_STATE = "previousState";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_STATE)
  private BackgroundQueryState previousState;

  public static final String SERIALIZED_NAME_PROGRESS = "progress";
  @SerializedName(SERIALIZED_NAME_PROGRESS)
  private String progress;

  public BackgroundQueryCancelResponse() {
  }

  public BackgroundQueryCancelResponse hadData(Boolean hadData) {
    
    this.hadData = hadData;
    return this;
  }

   /**
   * Get hadData
   * @return hadData
  **/
  @jakarta.annotation.Nullable
  public Boolean getHadData() {
    return hadData;
  }


  public void setHadData(Boolean hadData) {
    this.hadData = hadData;
  }


  public BackgroundQueryCancelResponse previousStatus(TaskStatus previousStatus) {
    
    this.previousStatus = previousStatus;
    return this;
  }

   /**
   * Get previousStatus
   * @return previousStatus
  **/
  @jakarta.annotation.Nullable
  public TaskStatus getPreviousStatus() {
    return previousStatus;
  }


  public void setPreviousStatus(TaskStatus previousStatus) {
    this.previousStatus = previousStatus;
  }


  public BackgroundQueryCancelResponse previousState(BackgroundQueryState previousState) {
    
    this.previousState = previousState;
    return this;
  }

   /**
   * Get previousState
   * @return previousState
  **/
  @jakarta.annotation.Nullable
  public BackgroundQueryState getPreviousState() {
    return previousState;
  }


  public void setPreviousState(BackgroundQueryState previousState) {
    this.previousState = previousState;
  }


  public BackgroundQueryCancelResponse progress(String progress) {
    
    this.progress = progress;
    return this;
  }

   /**
   * Get progress
   * @return progress
  **/
  @jakarta.annotation.Nullable
  public String getProgress() {
    return progress;
  }


  public void setProgress(String progress) {
    this.progress = progress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundQueryCancelResponse backgroundQueryCancelResponse = (BackgroundQueryCancelResponse) o;
    return Objects.equals(this.hadData, backgroundQueryCancelResponse.hadData) &&
        Objects.equals(this.previousStatus, backgroundQueryCancelResponse.previousStatus) &&
        Objects.equals(this.previousState, backgroundQueryCancelResponse.previousState) &&
        Objects.equals(this.progress, backgroundQueryCancelResponse.progress);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hadData, previousStatus, previousState, progress);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundQueryCancelResponse {\n");
    sb.append("    hadData: ").append(toIndentedString(hadData)).append("\n");
    sb.append("    previousStatus: ").append(toIndentedString(previousStatus)).append("\n");
    sb.append("    previousState: ").append(toIndentedString(previousState)).append("\n");
    sb.append("    progress: ").append(toIndentedString(progress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hadData");
    openapiFields.add("previousStatus");
    openapiFields.add("previousState");
    openapiFields.add("progress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BackgroundQueryCancelResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackgroundQueryCancelResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackgroundQueryCancelResponse is not found in the empty JSON string", BackgroundQueryCancelResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("progress") != null && !jsonObj.get("progress").isJsonNull()) && !jsonObj.get("progress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `progress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("progress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackgroundQueryCancelResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackgroundQueryCancelResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackgroundQueryCancelResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackgroundQueryCancelResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BackgroundQueryCancelResponse>() {
           @Override
           public void write(JsonWriter out, BackgroundQueryCancelResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackgroundQueryCancelResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BackgroundQueryCancelResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BackgroundQueryCancelResponse
  * @throws IOException if the JSON string is invalid with respect to BackgroundQueryCancelResponse
  */
  public static BackgroundQueryCancelResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackgroundQueryCancelResponse.class);
  }

 /**
  * Convert an instance of BackgroundQueryCancelResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
