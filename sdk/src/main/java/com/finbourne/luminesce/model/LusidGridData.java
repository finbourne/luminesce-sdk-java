/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.model;

import java.util.Objects;
import com.finbourne.luminesce.model.DashboardType;
import com.finbourne.luminesce.model.DateParameters;
import com.finbourne.luminesce.model.ResourceId;
import com.finbourne.luminesce.model.TableView;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.finbourne.luminesce.JSON;

/**
 * Representation of the data we will get from the dashboard
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class LusidGridData {
  public static final String SERIALIZED_NAME_LUSID_GRID_DESIGN = "lusidGridDesign";
  @SerializedName(SERIALIZED_NAME_LUSID_GRID_DESIGN)
  private TableView lusidGridDesign;

  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private ResourceId resourceId;

  public static final String SERIALIZED_NAME_DASHBOARD_TYPE = "dashboardType";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_TYPE)
  private DashboardType dashboardType;

  public static final String SERIALIZED_NAME_USE_SETTLE_DATE = "useSettleDate";
  @SerializedName(SERIALIZED_NAME_USE_SETTLE_DATE)
  private Boolean useSettleDate;

  public static final String SERIALIZED_NAME_DATES = "dates";
  @SerializedName(SERIALIZED_NAME_DATES)
  private DateParameters dates;

  public LusidGridData() {
  }

  public LusidGridData lusidGridDesign(TableView lusidGridDesign) {
    
    this.lusidGridDesign = lusidGridDesign;
    return this;
  }

   /**
   * Get lusidGridDesign
   * @return lusidGridDesign
  **/
  @jakarta.annotation.Nonnull
  public TableView getLusidGridDesign() {
    return lusidGridDesign;
  }


  public void setLusidGridDesign(TableView lusidGridDesign) {
    this.lusidGridDesign = lusidGridDesign;
  }


  public LusidGridData resourceId(ResourceId resourceId) {
    
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @jakarta.annotation.Nonnull
  public ResourceId getResourceId() {
    return resourceId;
  }


  public void setResourceId(ResourceId resourceId) {
    this.resourceId = resourceId;
  }


  public LusidGridData dashboardType(DashboardType dashboardType) {
    
    this.dashboardType = dashboardType;
    return this;
  }

   /**
   * Get dashboardType
   * @return dashboardType
  **/
  @jakarta.annotation.Nullable
  public DashboardType getDashboardType() {
    return dashboardType;
  }


  public void setDashboardType(DashboardType dashboardType) {
    this.dashboardType = dashboardType;
  }


  public LusidGridData useSettleDate(Boolean useSettleDate) {
    
    this.useSettleDate = useSettleDate;
    return this;
  }

   /**
   * Whether to use the Settlement date or the Transaction date
   * @return useSettleDate
  **/
  @jakarta.annotation.Nullable
  public Boolean getUseSettleDate() {
    return useSettleDate;
  }


  public void setUseSettleDate(Boolean useSettleDate) {
    this.useSettleDate = useSettleDate;
  }


  public LusidGridData dates(DateParameters dates) {
    
    this.dates = dates;
    return this;
  }

   /**
   * Get dates
   * @return dates
  **/
  @jakarta.annotation.Nullable
  public DateParameters getDates() {
    return dates;
  }


  public void setDates(DateParameters dates) {
    this.dates = dates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LusidGridData lusidGridData = (LusidGridData) o;
    return Objects.equals(this.lusidGridDesign, lusidGridData.lusidGridDesign) &&
        Objects.equals(this.resourceId, lusidGridData.resourceId) &&
        Objects.equals(this.dashboardType, lusidGridData.dashboardType) &&
        Objects.equals(this.useSettleDate, lusidGridData.useSettleDate) &&
        Objects.equals(this.dates, lusidGridData.dates);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(lusidGridDesign, resourceId, dashboardType, useSettleDate, dates);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LusidGridData {\n");
    sb.append("    lusidGridDesign: ").append(toIndentedString(lusidGridDesign)).append("\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    dashboardType: ").append(toIndentedString(dashboardType)).append("\n");
    sb.append("    useSettleDate: ").append(toIndentedString(useSettleDate)).append("\n");
    sb.append("    dates: ").append(toIndentedString(dates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lusidGridDesign");
    openapiFields.add("resourceId");
    openapiFields.add("dashboardType");
    openapiFields.add("useSettleDate");
    openapiFields.add("dates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("lusidGridDesign");
    openapiRequiredFields.add("resourceId");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to LusidGridData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LusidGridData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LusidGridData is not found in the empty JSON string", LusidGridData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LusidGridData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `lusidGridDesign`
      TableView.validateJsonElement(jsonObj.get("lusidGridDesign"));
      // validate the required field `resourceId`
      ResourceId.validateJsonElement(jsonObj.get("resourceId"));
      // validate the optional field `dates`
      if (jsonObj.get("dates") != null && !jsonObj.get("dates").isJsonNull()) {
        DateParameters.validateJsonElement(jsonObj.get("dates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LusidGridData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LusidGridData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LusidGridData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LusidGridData.class));

       return (TypeAdapter<T>) new TypeAdapter<LusidGridData>() {
           @Override
           public void write(JsonWriter out, LusidGridData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LusidGridData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LusidGridData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LusidGridData
  * @throws IOException if the JSON string is invalid with respect to LusidGridData
  */
  public static LusidGridData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LusidGridData.class);
  }

 /**
  * Convert an instance of LusidGridData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}
