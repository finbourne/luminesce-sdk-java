/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.api;

import com.finbourne.luminesce.ApiCallback;
import com.finbourne.luminesce.ApiClient;
import com.finbourne.luminesce.ApiException;
import com.finbourne.luminesce.ApiResponse;
import com.finbourne.luminesce.Configuration;
import com.finbourne.luminesce.Pair;
import com.finbourne.luminesce.ProgressRequestBody;
import com.finbourne.luminesce.ProgressResponseBody;
import com.finbourne.luminesce.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.luminesce.model.ResourceListOfAccessControlledResource;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationMetadataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApplicationMetadataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationMetadataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getServicesAsAccessControlledResourcesCall(final ApiCallback _callback) throws ApiException {
        return getServicesAsAccessControlledResourcesCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getServicesAsAccessControlledResourcesCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/metadata/access/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServicesAsAccessControlledResourcesValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return getServicesAsAccessControlledResourcesCall(_callback, opts);

    }


    private ApiResponse<ResourceListOfAccessControlledResource> getServicesAsAccessControlledResourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getServicesAsAccessControlledResourcesValidateBeforeCall(null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfAccessControlledResource> getServicesAsAccessControlledResourcesWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getServicesAsAccessControlledResourcesValidateBeforeCall(null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getServicesAsAccessControlledResourcesAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServicesAsAccessControlledResourcesValidateBeforeCall(_callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getServicesAsAccessControlledResourcesAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getServicesAsAccessControlledResourcesValidateBeforeCall(_callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfAccessControlledResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetServicesAsAccessControlledResourcesRequest {

        private APIgetServicesAsAccessControlledResourcesRequest() {
        }

        /**
         * Build call for getServicesAsAccessControlledResources
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getServicesAsAccessControlledResourcesCall(_callback);
        }

        /**
         * Execute getServicesAsAccessControlledResources request
         * @return ResourceListOfAccessControlledResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAccessControlledResource execute() throws ApiException {
            ApiResponse<ResourceListOfAccessControlledResource> localVarResp = getServicesAsAccessControlledResourcesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getServicesAsAccessControlledResources request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfAccessControlledResource
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfAccessControlledResource execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfAccessControlledResource> localVarResp = getServicesAsAccessControlledResourcesWithHttpInfo(opts);
            return localVarResp.getData();
        }

        /**
         * Execute getServicesAsAccessControlledResources request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfAccessControlledResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAccessControlledResource> executeWithHttpInfo() throws ApiException {
            return getServicesAsAccessControlledResourcesWithHttpInfo();
        }

        /**
         * Execute getServicesAsAccessControlledResources request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfAccessControlledResource&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfAccessControlledResource> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getServicesAsAccessControlledResourcesWithHttpInfo(opts);
        }

        /**
         * Execute getServicesAsAccessControlledResources request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback) throws ApiException {
            return getServicesAsAccessControlledResourcesAsync(_callback);
        }

        /**
         * Execute getServicesAsAccessControlledResources request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfAccessControlledResource> _callback, ConfigurationOptions opts) throws ApiException {
            return getServicesAsAccessControlledResourcesAsync(_callback, opts);
        }
    }

    /**
     * GetServicesAsAccessControlledResources: Get resources available for access control
     *  Get the comprehensive set of resources that are available for access control.  The following LuminesceSql is executed to return this information,  which is then packaged up as AccessControlledResource:  &#x60;&#x60;&#x60;sql select  Name,  min(coalesce(Description, Name) || &#39; (&#39; || Type || &#39;)&#39;) as Description from  Sys.Registration where  Type in (&#39;DirectProvider&#39;, &#39;DataProvider&#39;)  and  ShowAll &#x3D; true group by 1 order by 1   &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 401 Unauthorized - 403 Forbidden 
     * @return APIgetServicesAsAccessControlledResourcesRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public APIgetServicesAsAccessControlledResourcesRequest getServicesAsAccessControlledResources() {
        return new APIgetServicesAsAccessControlledResourcesRequest();
    }
}
