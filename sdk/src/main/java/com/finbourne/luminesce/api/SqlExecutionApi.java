/*
 * FINBOURNE Luminesce Web API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.luminesce.api;

import com.finbourne.luminesce.ApiCallback;
import com.finbourne.luminesce.ApiClient;
import com.finbourne.luminesce.ApiException;
import com.finbourne.luminesce.ApiResponse;
import com.finbourne.luminesce.Configuration;
import com.finbourne.luminesce.Pair;
import com.finbourne.luminesce.ProgressRequestBody;
import com.finbourne.luminesce.ProgressResponseBody;
import com.finbourne.luminesce.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import com.finbourne.luminesce.model.LusidProblemDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SqlExecutionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SqlExecutionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SqlExecutionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByQueryCsvCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, final ApiCallback _callback) throws ApiException {
        return getByQueryCsvCall(query, scalarParameters, queryName, download, timeout, delimiter, escape,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryCsvCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/csv/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (escape != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("escape", escape));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryCsvValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryCsv(Async)");
        }

        return getByQueryCsvCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback, opts);

    }


    private ApiResponse<String> getByQueryCsvWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape) throws ApiException {
        okhttp3.Call localVarCall = getByQueryCsvValidateBeforeCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> getByQueryCsvWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryCsvValidateBeforeCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryCsvAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryCsvValidateBeforeCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryCsvAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, String delimiter, String escape, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryCsvValidateBeforeCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryCsvRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeout;
        private String delimiter;
        private String escape;

        private APIgetByQueryCsvRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Set delimiter
         * @param delimiter Delimiter string to override the default (optional)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest delimiter(String delimiter) {
            this.delimiter = delimiter;
            return this;
        }

        /**
         * Set escape
         * @param escape Escape character to override the default (optional)
         * @return APIgetByQueryCsvRequest
         */
        public APIgetByQueryCsvRequest escape(String escape) {
            this.escape = escape;
            return this;
        }

        /**
         * Build call for getByQueryCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryCsvCall(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback);
        }

        /**
         * Execute getByQueryCsv request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByQueryCsvWithHttpInfo(query, scalarParameters, queryName, download, timeout, delimiter, escape);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryCsv request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = getByQueryCsvWithHttpInfo(query, scalarParameters, queryName, download, timeout, delimiter, escape, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryCsv request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByQueryCsvWithHttpInfo(query, scalarParameters, queryName, download, timeout, delimiter, escape);
        }

        /**
         * Execute getByQueryCsv request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryCsvWithHttpInfo(query, scalarParameters, queryName, download, timeout, delimiter, escape, opts);
        }

        /**
         * Execute getByQueryCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByQueryCsvAsync(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback);
        }

        /**
         * Execute getByQueryCsv request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryCsvAsync(query, scalarParameters, queryName, download, timeout, delimiter, escape, _callback, opts);
        }
    }

    /**
     * GetByQueryCsv: Executes Sql from the url returning CSV
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryCsvRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryCsvRequest getByQueryCsv(String query) {
        return new APIgetByQueryCsvRequest(query);
    }
    private okhttp3.Call getByQueryExcelCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback) throws ApiException {
        return getByQueryExcelCall(query, scalarParameters, queryName, timeout,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryExcelCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/excel/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryExcelValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryExcel(Async)");
        }

        return getByQueryExcelCall(query, scalarParameters, queryName, timeout, _callback, opts);

    }


    private ApiResponse<File> getByQueryExcelWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = getByQueryExcelValidateBeforeCall(query, scalarParameters, queryName, timeout, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> getByQueryExcelWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryExcelValidateBeforeCall(query, scalarParameters, queryName, timeout, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryExcelAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryExcelValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryExcelAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryExcelValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryExcelRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeout;

        private APIgetByQueryExcelRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryExcelRequest
         */
        public APIgetByQueryExcelRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryExcelRequest
         */
        public APIgetByQueryExcelRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryExcelRequest
         */
        public APIgetByQueryExcelRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Build call for getByQueryExcel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryExcelCall(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQueryExcel request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getByQueryExcelWithHttpInfo(query, scalarParameters, queryName, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryExcel request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = getByQueryExcelWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryExcel request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getByQueryExcelWithHttpInfo(query, scalarParameters, queryName, timeout);
        }

        /**
         * Execute getByQueryExcel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryExcelWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
        }

        /**
         * Execute getByQueryExcel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getByQueryExcelAsync(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQueryExcel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryExcelAsync(query, scalarParameters, queryName, timeout, _callback, opts);
        }
    }

    /**
     * GetByQueryExcel: Executes Sql from the url returning an Excel file
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryExcelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryExcelRequest getByQueryExcel(String query) {
        return new APIgetByQueryExcelRequest(query);
    }
    private okhttp3.Call getByQueryJsonCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, final ApiCallback _callback) throws ApiException {
        return getByQueryJsonCall(query, scalarParameters, queryName, timeout, jsonProper,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryJsonCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/json/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (jsonProper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jsonProper", jsonProper));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryJsonValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryJson(Async)");
        }

        return getByQueryJsonCall(query, scalarParameters, queryName, timeout, jsonProper, _callback, opts);

    }


    private ApiResponse<String> getByQueryJsonWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper) throws ApiException {
        okhttp3.Call localVarCall = getByQueryJsonValidateBeforeCall(query, scalarParameters, queryName, timeout, jsonProper, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> getByQueryJsonWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryJsonValidateBeforeCall(query, scalarParameters, queryName, timeout, jsonProper, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryJsonAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryJsonValidateBeforeCall(query, scalarParameters, queryName, timeout, jsonProper, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryJsonAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, Boolean jsonProper, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryJsonValidateBeforeCall(query, scalarParameters, queryName, timeout, jsonProper, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryJsonRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeout;
        private Boolean jsonProper;

        private APIgetByQueryJsonRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryJsonRequest
         */
        public APIgetByQueryJsonRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryJsonRequest
         */
        public APIgetByQueryJsonRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryJsonRequest
         */
        public APIgetByQueryJsonRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Set jsonProper
         * @param jsonProper Should this be text/json (not json-encoded-as-a-string) (optional, default to false)
         * @return APIgetByQueryJsonRequest
         */
        public APIgetByQueryJsonRequest jsonProper(Boolean jsonProper) {
            this.jsonProper = jsonProper;
            return this;
        }

        /**
         * Build call for getByQueryJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryJsonCall(query, scalarParameters, queryName, timeout, jsonProper, _callback);
        }

        /**
         * Execute getByQueryJson request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByQueryJsonWithHttpInfo(query, scalarParameters, queryName, timeout, jsonProper);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryJson request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = getByQueryJsonWithHttpInfo(query, scalarParameters, queryName, timeout, jsonProper, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryJson request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByQueryJsonWithHttpInfo(query, scalarParameters, queryName, timeout, jsonProper);
        }

        /**
         * Execute getByQueryJson request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryJsonWithHttpInfo(query, scalarParameters, queryName, timeout, jsonProper, opts);
        }

        /**
         * Execute getByQueryJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByQueryJsonAsync(query, scalarParameters, queryName, timeout, jsonProper, _callback);
        }

        /**
         * Execute getByQueryJson request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryJsonAsync(query, scalarParameters, queryName, timeout, jsonProper, _callback, opts);
        }
    }

    /**
     * GetByQueryJson: Executes Sql from the url returning JSON
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryJsonRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryJsonRequest getByQueryJson(String query) {
        return new APIgetByQueryJsonRequest(query);
    }
    private okhttp3.Call getByQueryParquetCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback) throws ApiException {
        return getByQueryParquetCall(query, scalarParameters, queryName, timeout,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryParquetCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/parquet/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryParquetValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryParquet(Async)");
        }

        return getByQueryParquetCall(query, scalarParameters, queryName, timeout, _callback, opts);

    }


    private ApiResponse<File> getByQueryParquetWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = getByQueryParquetValidateBeforeCall(query, scalarParameters, queryName, timeout, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> getByQueryParquetWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryParquetValidateBeforeCall(query, scalarParameters, queryName, timeout, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryParquetAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryParquetValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryParquetAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryParquetValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryParquetRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeout;

        private APIgetByQueryParquetRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryParquetRequest
         */
        public APIgetByQueryParquetRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryParquetRequest
         */
        public APIgetByQueryParquetRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryParquetRequest
         */
        public APIgetByQueryParquetRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Build call for getByQueryParquet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryParquetCall(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQueryParquet request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getByQueryParquetWithHttpInfo(query, scalarParameters, queryName, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryParquet request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = getByQueryParquetWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryParquet request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getByQueryParquetWithHttpInfo(query, scalarParameters, queryName, timeout);
        }

        /**
         * Execute getByQueryParquet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryParquetWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
        }

        /**
         * Execute getByQueryParquet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getByQueryParquetAsync(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQueryParquet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryParquetAsync(query, scalarParameters, queryName, timeout, _callback, opts);
        }
    }

    /**
     * GetByQueryParquet: Executes Sql from the url returning a Parquet file
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryParquetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryParquetRequest getByQueryParquet(String query) {
        return new APIgetByQueryParquetRequest(query);
    }
    private okhttp3.Call getByQueryPipeCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback) throws ApiException {
        return getByQueryPipeCall(query, scalarParameters, queryName, download, timeout,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryPipeCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/pipe/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryPipeValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryPipe(Async)");
        }

        return getByQueryPipeCall(query, scalarParameters, queryName, download, timeout, _callback, opts);

    }


    private ApiResponse<String> getByQueryPipeWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = getByQueryPipeValidateBeforeCall(query, scalarParameters, queryName, download, timeout, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> getByQueryPipeWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryPipeValidateBeforeCall(query, scalarParameters, queryName, download, timeout, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryPipeAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryPipeValidateBeforeCall(query, scalarParameters, queryName, download, timeout, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryPipeAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryPipeValidateBeforeCall(query, scalarParameters, queryName, download, timeout, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryPipeRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeout;

        private APIgetByQueryPipeRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryPipeRequest
         */
        public APIgetByQueryPipeRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryPipeRequest
         */
        public APIgetByQueryPipeRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIgetByQueryPipeRequest
         */
        public APIgetByQueryPipeRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryPipeRequest
         */
        public APIgetByQueryPipeRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Build call for getByQueryPipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryPipeCall(query, scalarParameters, queryName, download, timeout, _callback);
        }

        /**
         * Execute getByQueryPipe request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByQueryPipeWithHttpInfo(query, scalarParameters, queryName, download, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryPipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = getByQueryPipeWithHttpInfo(query, scalarParameters, queryName, download, timeout, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryPipe request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByQueryPipeWithHttpInfo(query, scalarParameters, queryName, download, timeout);
        }

        /**
         * Execute getByQueryPipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryPipeWithHttpInfo(query, scalarParameters, queryName, download, timeout, opts);
        }

        /**
         * Execute getByQueryPipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByQueryPipeAsync(query, scalarParameters, queryName, download, timeout, _callback);
        }

        /**
         * Execute getByQueryPipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryPipeAsync(query, scalarParameters, queryName, download, timeout, _callback, opts);
        }
    }

    /**
     * GetByQueryPipe: Executes Sql from the url returning pipe-delimited
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryPipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryPipeRequest getByQueryPipe(String query) {
        return new APIgetByQueryPipeRequest(query);
    }
    private okhttp3.Call getByQuerySqliteCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback) throws ApiException {
        return getByQuerySqliteCall(query, scalarParameters, queryName, timeout,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQuerySqliteCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/sqlite/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQuerySqliteValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQuerySqlite(Async)");
        }

        return getByQuerySqliteCall(query, scalarParameters, queryName, timeout, _callback, opts);

    }


    private ApiResponse<File> getByQuerySqliteWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = getByQuerySqliteValidateBeforeCall(query, scalarParameters, queryName, timeout, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> getByQuerySqliteWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQuerySqliteValidateBeforeCall(query, scalarParameters, queryName, timeout, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQuerySqliteAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQuerySqliteValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQuerySqliteAsync(String query, Map<String, String> scalarParameters, String queryName, Integer timeout, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQuerySqliteValidateBeforeCall(query, scalarParameters, queryName, timeout, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQuerySqliteRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeout;

        private APIgetByQuerySqliteRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQuerySqliteRequest
         */
        public APIgetByQuerySqliteRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQuerySqliteRequest
         */
        public APIgetByQuerySqliteRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQuerySqliteRequest
         */
        public APIgetByQuerySqliteRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Build call for getByQuerySqlite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQuerySqliteCall(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQuerySqlite request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = getByQuerySqliteWithHttpInfo(query, scalarParameters, queryName, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute getByQuerySqlite request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = getByQuerySqliteWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQuerySqlite request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return getByQuerySqliteWithHttpInfo(query, scalarParameters, queryName, timeout);
        }

        /**
         * Execute getByQuerySqlite request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQuerySqliteWithHttpInfo(query, scalarParameters, queryName, timeout, opts);
        }

        /**
         * Execute getByQuerySqlite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return getByQuerySqliteAsync(query, scalarParameters, queryName, timeout, _callback);
        }

        /**
         * Execute getByQuerySqlite request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQuerySqliteAsync(query, scalarParameters, queryName, timeout, _callback, opts);
        }
    }

    /**
     * GetByQuerySqlite: Executes Sql from the url returning SqLite DB
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQuerySqliteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQuerySqliteRequest getByQuerySqlite(String query) {
        return new APIgetByQuerySqliteRequest(query);
    }
    private okhttp3.Call getByQueryXmlCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback) throws ApiException {
        return getByQueryXmlCall(query, scalarParameters, queryName, download, timeout,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getByQueryXmlCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/Sql/xml/{query}"
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByQueryXmlValidateBeforeCall(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getByQueryXml(Async)");
        }

        return getByQueryXmlCall(query, scalarParameters, queryName, download, timeout, _callback, opts);

    }


    private ApiResponse<String> getByQueryXmlWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = getByQueryXmlValidateBeforeCall(query, scalarParameters, queryName, download, timeout, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> getByQueryXmlWithHttpInfo(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getByQueryXmlValidateBeforeCall(query, scalarParameters, queryName, download, timeout, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByQueryXmlAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByQueryXmlValidateBeforeCall(query, scalarParameters, queryName, download, timeout, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getByQueryXmlAsync(String query, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeout, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getByQueryXmlValidateBeforeCall(query, scalarParameters, queryName, download, timeout, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetByQueryXmlRequest {
        private final String query;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeout;

        private APIgetByQueryXmlRequest(String query) {
            this.query = query;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIgetByQueryXmlRequest
         */
        public APIgetByQueryXmlRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIgetByQueryXmlRequest
         */
        public APIgetByQueryXmlRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIgetByQueryXmlRequest
         */
        public APIgetByQueryXmlRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeout
         * @param timeout In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIgetByQueryXmlRequest
         */
        public APIgetByQueryXmlRequest timeout(Integer timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Build call for getByQueryXml
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByQueryXmlCall(query, scalarParameters, queryName, download, timeout, _callback);
        }

        /**
         * Execute getByQueryXml request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByQueryXmlWithHttpInfo(query, scalarParameters, queryName, download, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryXml request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = getByQueryXmlWithHttpInfo(query, scalarParameters, queryName, download, timeout, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getByQueryXml request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByQueryXmlWithHttpInfo(query, scalarParameters, queryName, download, timeout);
        }

        /**
         * Execute getByQueryXml request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getByQueryXmlWithHttpInfo(query, scalarParameters, queryName, download, timeout, opts);
        }

        /**
         * Execute getByQueryXml request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByQueryXmlAsync(query, scalarParameters, queryName, download, timeout, _callback);
        }

        /**
         * Execute getByQueryXml request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return getByQueryXmlAsync(query, scalarParameters, queryName, download, timeout, _callback, opts);
        }
    }

    /**
     * GetByQueryXml: Executes Sql from the url returning XML
     *  Returns data from a simple single-line query execution which is specified on the url. e.g. &#x60;select ^ from Sys.Field order by 1, 2&#x60;, returned in the format of the method name.  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param query LuminesceSql to Execute (must be one line only) (required)
     * @return APIgetByQueryXmlRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIgetByQueryXmlRequest getByQueryXml(String query) {
        return new APIgetByQueryXmlRequest(query);
    }
    private okhttp3.Call putByQueryCsvCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, final ApiCallback _callback) throws ApiException {
        return putByQueryCsvCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryCsvCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        if (delimiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delimiter", delimiter));
        }

        if (escape != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("escape", escape));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryCsvValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryCsv(Async)");
        }

        return putByQueryCsvCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback, opts);

    }


    private ApiResponse<String> putByQueryCsvWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape) throws ApiException {
        okhttp3.Call localVarCall = putByQueryCsvValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> putByQueryCsvWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryCsvValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryCsvAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryCsvValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryCsvAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, String delimiter, String escape, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryCsvValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryCsvRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeoutSeconds;
        private String delimiter;
        private String escape;

        private APIputByQueryCsvRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Set delimiter
         * @param delimiter Delimiter string to override the default (optional)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest delimiter(String delimiter) {
            this.delimiter = delimiter;
            return this;
        }

        /**
         * Set escape
         * @param escape Escape character to override the default (optional)
         * @return APIputByQueryCsvRequest
         */
        public APIputByQueryCsvRequest escape(String escape) {
            this.escape = escape;
            return this;
        }

        /**
         * Build call for putByQueryCsv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryCsvCall(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback);
        }

        /**
         * Execute putByQueryCsv request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = putByQueryCsvWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryCsv request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = putByQueryCsvWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryCsv request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return putByQueryCsvWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape);
        }

        /**
         * Execute putByQueryCsv request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryCsvWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, opts);
        }

        /**
         * Execute putByQueryCsv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return putByQueryCsvAsync(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback);
        }

        /**
         * Execute putByQueryCsv request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryCsvAsync(body, scalarParameters, queryName, download, timeoutSeconds, delimiter, escape, _callback, opts);
        }
    }

    /**
     * PutByQueryCsv: Executes Sql from the body returning CSV
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryCsvRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryCsvRequest putByQueryCsv(String body) {
        return new APIputByQueryCsvRequest(body);
    }
    private okhttp3.Call putByQueryExcelCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback) throws ApiException {
        return putByQueryExcelCall(body, scalarParameters, queryName, timeoutSeconds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryExcelCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/excel";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryExcelValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryExcel(Async)");
        }

        return putByQueryExcelCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);

    }


    private ApiResponse<File> putByQueryExcelWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = putByQueryExcelValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> putByQueryExcelWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryExcelValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryExcelAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryExcelValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryExcelAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryExcelValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryExcelRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeoutSeconds;

        private APIputByQueryExcelRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryExcelRequest
         */
        public APIputByQueryExcelRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryExcelRequest
         */
        public APIputByQueryExcelRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryExcelRequest
         */
        public APIputByQueryExcelRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Build call for putByQueryExcel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryExcelCall(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryExcel request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = putByQueryExcelWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryExcel request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = putByQueryExcelWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryExcel request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return putByQueryExcelWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
        }

        /**
         * Execute putByQueryExcel request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryExcelWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
        }

        /**
         * Execute putByQueryExcel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return putByQueryExcelAsync(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryExcel request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryExcelAsync(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        }
    }

    /**
     * PutByQueryExcel: Executes Sql from the body making an Excel file
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryExcelRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryExcelRequest putByQueryExcel(String body) {
        return new APIputByQueryExcelRequest(body);
    }
    private okhttp3.Call putByQueryJsonCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, final ApiCallback _callback) throws ApiException {
        return putByQueryJsonCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryJsonCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        if (jsonProper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jsonProper", jsonProper));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryJsonValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryJson(Async)");
        }

        return putByQueryJsonCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback, opts);

    }


    private ApiResponse<String> putByQueryJsonWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper) throws ApiException {
        okhttp3.Call localVarCall = putByQueryJsonValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> putByQueryJsonWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryJsonValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryJsonAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryJsonValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryJsonAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, Boolean jsonProper, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryJsonValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryJsonRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeoutSeconds;
        private Boolean jsonProper;

        private APIputByQueryJsonRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryJsonRequest
         */
        public APIputByQueryJsonRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryJsonRequest
         */
        public APIputByQueryJsonRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryJsonRequest
         */
        public APIputByQueryJsonRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Set jsonProper
         * @param jsonProper Should this be text/json (not json-encoded-as-a-string) (optional, default to false)
         * @return APIputByQueryJsonRequest
         */
        public APIputByQueryJsonRequest jsonProper(Boolean jsonProper) {
            this.jsonProper = jsonProper;
            return this;
        }

        /**
         * Build call for putByQueryJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryJsonCall(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback);
        }

        /**
         * Execute putByQueryJson request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = putByQueryJsonWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, jsonProper);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryJson request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = putByQueryJsonWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, jsonProper, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryJson request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return putByQueryJsonWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, jsonProper);
        }

        /**
         * Execute putByQueryJson request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryJsonWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, jsonProper, opts);
        }

        /**
         * Execute putByQueryJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return putByQueryJsonAsync(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback);
        }

        /**
         * Execute putByQueryJson request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryJsonAsync(body, scalarParameters, queryName, timeoutSeconds, jsonProper, _callback, opts);
        }
    }

    /**
     * PutByQueryJson: Executes Sql from the body returning JSON
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryJsonRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryJsonRequest putByQueryJson(String body) {
        return new APIputByQueryJsonRequest(body);
    }
    private okhttp3.Call putByQueryParquetCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback) throws ApiException {
        return putByQueryParquetCall(body, scalarParameters, queryName, timeoutSeconds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryParquetCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/parquet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryParquetValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryParquet(Async)");
        }

        return putByQueryParquetCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);

    }


    private ApiResponse<File> putByQueryParquetWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = putByQueryParquetValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> putByQueryParquetWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryParquetValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryParquetAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryParquetValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryParquetAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryParquetValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryParquetRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeoutSeconds;

        private APIputByQueryParquetRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryParquetRequest
         */
        public APIputByQueryParquetRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryParquetRequest
         */
        public APIputByQueryParquetRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryParquetRequest
         */
        public APIputByQueryParquetRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Build call for putByQueryParquet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryParquetCall(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryParquet request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = putByQueryParquetWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryParquet request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = putByQueryParquetWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryParquet request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return putByQueryParquetWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
        }

        /**
         * Execute putByQueryParquet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryParquetWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
        }

        /**
         * Execute putByQueryParquet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return putByQueryParquetAsync(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryParquet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryParquetAsync(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        }
    }

    /**
     * PutByQueryParquet: Executes Sql from the body making a Parquet file
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryParquetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryParquetRequest putByQueryParquet(String body) {
        return new APIputByQueryParquetRequest(body);
    }
    private okhttp3.Call putByQueryPipeCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback) throws ApiException {
        return putByQueryPipeCall(body, scalarParameters, queryName, download, timeoutSeconds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryPipeCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/pipe";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryPipeValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryPipe(Async)");
        }

        return putByQueryPipeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);

    }


    private ApiResponse<String> putByQueryPipeWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = putByQueryPipeValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> putByQueryPipeWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryPipeValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryPipeAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryPipeValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryPipeAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryPipeValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryPipeRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeoutSeconds;

        private APIputByQueryPipeRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryPipeRequest
         */
        public APIputByQueryPipeRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryPipeRequest
         */
        public APIputByQueryPipeRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIputByQueryPipeRequest
         */
        public APIputByQueryPipeRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryPipeRequest
         */
        public APIputByQueryPipeRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Build call for putByQueryPipe
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryPipeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryPipe request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = putByQueryPipeWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryPipe request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = putByQueryPipeWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryPipe request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return putByQueryPipeWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds);
        }

        /**
         * Execute putByQueryPipe request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryPipeWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, opts);
        }

        /**
         * Execute putByQueryPipe request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return putByQueryPipeAsync(body, scalarParameters, queryName, download, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryPipe request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryPipeAsync(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);
        }
    }

    /**
     * PutByQueryPipe: Executes Sql from the body making pipe-delimited
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryPipeRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryPipeRequest putByQueryPipe(String body) {
        return new APIputByQueryPipeRequest(body);
    }
    private okhttp3.Call putByQuerySqliteCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback) throws ApiException {
        return putByQuerySqliteCall(body, scalarParameters, queryName, timeoutSeconds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQuerySqliteCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/sqlite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQuerySqliteValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQuerySqlite(Async)");
        }

        return putByQuerySqliteCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);

    }


    private ApiResponse<File> putByQuerySqliteWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = putByQuerySqliteValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<File> putByQuerySqliteWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQuerySqliteValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, null, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQuerySqliteAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQuerySqliteValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQuerySqliteAsync(String body, Map<String, String> scalarParameters, String queryName, Integer timeoutSeconds, final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQuerySqliteValidateBeforeCall(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQuerySqliteRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Integer timeoutSeconds;

        private APIputByQuerySqliteRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQuerySqliteRequest
         */
        public APIputByQuerySqliteRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQuerySqliteRequest
         */
        public APIputByQuerySqliteRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQuerySqliteRequest
         */
        public APIputByQuerySqliteRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Build call for putByQuerySqlite
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQuerySqliteCall(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQuerySqlite request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = putByQuerySqliteWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
            return localVarResp.getData();
        }

        /**
         * Execute putByQuerySqlite request. Use any specified configuration options to override any other configuration for this request only.
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public File execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<File> localVarResp = putByQuerySqliteWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQuerySqlite request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return putByQuerySqliteWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds);
        }

        /**
         * Execute putByQuerySqlite request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQuerySqliteWithHttpInfo(body, scalarParameters, queryName, timeoutSeconds, opts);
        }

        /**
         * Execute putByQuerySqlite request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return putByQuerySqliteAsync(body, scalarParameters, queryName, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQuerySqlite request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQuerySqliteAsync(body, scalarParameters, queryName, timeoutSeconds, _callback, opts);
        }
    }

    /**
     * PutByQuerySqlite: Executes Sql from the body returning SqLite DB
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQuerySqliteRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQuerySqliteRequest putByQuerySqlite(String body) {
        return new APIputByQuerySqliteRequest(body);
    }
    private okhttp3.Call putByQueryXmlCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback) throws ApiException {
        return putByQueryXmlCall(body, scalarParameters, queryName, download, timeoutSeconds,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call putByQueryXmlCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/Sql/xml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scalarParameters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scalarParameters", scalarParameters));
        }

        if (queryName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("queryName", queryName));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        if (timeoutSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutSeconds", timeoutSeconds));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putByQueryXmlValidateBeforeCall(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putByQueryXml(Async)");
        }

        return putByQueryXmlCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);

    }


    private ApiResponse<String> putByQueryXmlWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds) throws ApiException {
        okhttp3.Call localVarCall = putByQueryXmlValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<String> putByQueryXmlWithHttpInfo(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = putByQueryXmlValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, null, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call putByQueryXmlAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = putByQueryXmlValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call putByQueryXmlAsync(String body, Map<String, String> scalarParameters, String queryName, Boolean download, Integer timeoutSeconds, final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = putByQueryXmlValidateBeforeCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIputByQueryXmlRequest {
        private final String body;
        private Map<String, String> scalarParameters;
        private String queryName;
        private Boolean download;
        private Integer timeoutSeconds;

        private APIputByQueryXmlRequest(String body) {
            this.body = body;
        }

        /**
         * Set scalarParameters
         * @param scalarParameters Json encoded dictionary of key-value pairs for scalar parameter values to use in the sql execution. (optional)
         * @return APIputByQueryXmlRequest
         */
        public APIputByQueryXmlRequest scalarParameters(Map<String, String> scalarParameters) {
            this.scalarParameters = scalarParameters;
            return this;
        }

        /**
         * Set queryName
         * @param queryName Name to apply to the query in logs and &#x60;Sys.Logs.HcQueryStart&#x60; (optional)
         * @return APIputByQueryXmlRequest
         */
        public APIputByQueryXmlRequest queryName(String queryName) {
            this.queryName = queryName;
            return this;
        }

        /**
         * Set download
         * @param download Makes this a file-download request (as opposed to returning the data in the response-body) (optional, default to false)
         * @return APIputByQueryXmlRequest
         */
        public APIputByQueryXmlRequest download(Boolean download) {
            this.download = download;
            return this;
        }

        /**
         * Set timeoutSeconds
         * @param timeoutSeconds In seconds: &lt;0 → ∞, 0 → 120s (optional, default to 0)
         * @return APIputByQueryXmlRequest
         */
        public APIputByQueryXmlRequest timeoutSeconds(Integer timeoutSeconds) {
            this.timeoutSeconds = timeoutSeconds;
            return this;
        }

        /**
         * Build call for putByQueryXml
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return putByQueryXmlCall(body, scalarParameters, queryName, download, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryXml request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = putByQueryXmlWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryXml request. Use any specified configuration options to override any other configuration for this request only.
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public String execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<String> localVarResp = putByQueryXmlWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, opts);
            return localVarResp.getData();
        }

        /**
         * Execute putByQueryXml request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return putByQueryXmlWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds);
        }

        /**
         * Execute putByQueryXml request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return putByQueryXmlWithHttpInfo(body, scalarParameters, queryName, download, timeoutSeconds, opts);
        }

        /**
         * Execute putByQueryXml request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return putByQueryXmlAsync(body, scalarParameters, queryName, download, timeoutSeconds, _callback);
        }

        /**
         * Execute putByQueryXml request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback, ConfigurationOptions opts) throws ApiException {
            return putByQueryXmlAsync(body, scalarParameters, queryName, download, timeoutSeconds, _callback, opts);
        }
    }

    /**
     * PutByQueryXml: Executes Sql from the body returning XML
     *  For more complex LuminesceSql a PUT will allow for longer and line break delimited Sql, whic will be returned in the format of the method name. e.g.: &#x60;&#x60;&#x60;sql @@cutoff &#x3D; select #2020-02-01#; @issues &#x3D; select Id, SortId, Summary, Created, Updated from Dev.Jira.Issue where Project&#x3D;&#39;HC&#39; and Created &lt; @@cutoff and Updated &gt; @@cutoff;  select i.Id, i.SortId, i.Summary, LinkText, LinkedIssueId, LinkedIssueSortId, LinkedIssueSummary from @issues i inner join Dev.Jira.Issue.Link li  on i.Id &#x3D; li.IssueId &#x60;&#x60;&#x60;  The following error codes are to be anticipated with standard Problem Detail reports: - 400 BadRequest - something failed with the execution or parsing of your query - 401 Unauthorized - 403 Forbidden 
     * @param body LuminesceSql to Execute (may be multi-line) (required)
     * @return APIputByQueryXmlRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public APIputByQueryXmlRequest putByQueryXml(String body) {
        return new APIputByQueryXmlRequest(body);
    }
}
